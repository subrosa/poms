<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.subrosa.maven</groupId>
    <artifactId>base-pom</artifactId>
    <version>0.8-SNAPSHOT</version>
    <relativePath>../base-pom</relativePath>
  </parent>
  <artifactId>webapp-pom</artifactId>
  <packaging>pom</packaging>
  <name>webapp-pom</name>
  <description>
	Pom for web applications.
  </description>
  <url>${urlRoot}/webapp-pom</url>

  <properties>
    <external.config.environmentDirectory>/opt/subrosa/etc</external.config.environmentDirectory>
    <external.config.directory>${external.config.environmentDirectory}</external.config.directory>
    <external.config.appName>${project.artifactId}</external.config.appName>
    <external.config.appContextPath>${external.config.appName}</external.config.appContextPath>
    <external.config.repositoryRoot>https://hg.subrosagames.com/config</external.config.repositoryRoot>
    <external.config.repositoryUrl>scm:hg:${external.config.repositoryRoot}/${external.config.appName}</external.config.repositoryUrl>
    <external.config.repositoryRevision>default</external.config.repositoryRevision>

    <!-- Property to support backwards compatibility of deploy.sh -->
    <db.migration.validateStyle>validate</db.migration.validateStyle>

    <!-- Some defaults for database migration -->
    <db.migration.skipExecution>false</db.migration.skipExecution>
    <mongo.migration.skipExecution>false</mongo.migration.skipExecution>
    <mongo.migration.currentRelease>${db.migration.currentRelease}</mongo.migration.currentRelease>

    <!-- Property to support command-line invocation of properties:write-project-properties -->
    <properties.outputFile>${project.build.directory}/project.properties</properties.outputFile>

    <deployer-tools.version>0.1</deployer-tools.version>
    <org.slf4j.version>1.6.6</org.slf4j.version>
    <org.springframework.version>3.1.1.RELEASE</org.springframework.version>
    <postgresql.version>8.3-606.jdbc4</postgresql.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.subrosa.commons</groupId>
        <artifactId>webapp-utils</artifactId>
        <version>1.1.0</version>
      </dependency>

      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>${org.slf4j.version}</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>jcl-over-slf4j</artifactId>
        <version>${org.slf4j.version}</version>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.0.6</version>
        <scope>runtime</scope>
      </dependency>

      <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
        <scope>provided</scope>
      </dependency>

      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-core</artifactId>
        <version>${org.springframework.version}</version>
        <exclusions>
          <exclusion>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <version>${postgresql.version}</version>
        <scope>runtime</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>com.subrosa.tools</groupId>
      <artifactId>deployer-tools</artifactId>
      <version>${deployer-tools.version}</version>
      <type>tar.gz</type>
      <classifier>bundle</classifier>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <excludes>
          <exclude>etc/**</exclude>
        </excludes>
        <filtering>false</filtering>
      </resource>
      <resource> <!-- To pick up the expected build.properties file -->
        <directory>src/main/resources</directory>
        <includes>
          <include>etc/**</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>

    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
      </testResource>
      <testResource> <!-- So fixtures are available to JUnit tests -->
        <directory>src/test/fixtures</directory>
      </testResource>
    </testResources>

    <pluginManagement>
      <plugins>
        <!-- Set locations of properties files -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>properties-maven-plugin</artifactId>
          <version>1.0-alpha-2</version>
          <configuration>
            <files>
              <file>src/main/resources/${external.config.appName}.properties</file>
              <file>${external.config.directory}/environment.properties</file>
              <file>${external.config.directory}/secure.properties</file>
              <file>${external.config.directory}/${external.config.appName}/${external.config.appName}-env.properties</file>
              <file>${external.config.directory}/host.properties</file>
              <file>${external.config.directory}/${external.config.appName}/host.properties</file>
            </files>
            <quiet>true</quiet>
            <outputFile>${properties.outputFile}</outputFile>
          </configuration>
        </plugin>

        <!-- Ensure that Surefire and Tomcat have the config directory property -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <configuration>
            <systemPropertyVariables>
              <external.config.directory>${external.config.directory}</external.config.directory>
            </systemPropertyVariables>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>tomcat-maven-plugin</artifactId>
          <version>1.1</version>
          <configuration>
            <systemProperties>
              <external.config.directory>${external.config.directory}</external.config.directory>
            </systemProperties>
          </configuration>
        </plugin>

        <plugin>  <!-- Setup the common properties for database migrations. -->
          <groupId>com.carbonfive.db-support</groupId>
          <artifactId>db-migration-maven-plugin</artifactId>
          <version>0.9.9-m5</version>
          <configuration>
            <url>${db.migration.url}</url>
            <username>${db.migration.username}</username>
            <password>${db.migration.password}</password>
            <currentRelease>${db.migration.currentRelease}</currentRelease>
            <migrationsPath>${db.migration.migrationsPath}</migrationsPath>
            <skipExecution>${db.migration.skipExecution}</skipExecution>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>postgresql</groupId>
              <artifactId>postgresql</artifactId>
              <version>${postgresql.version}</version>
            </dependency>
            <dependency>
              <groupId>org.codehaus.groovy</groupId>
              <artifactId>groovy-all</artifactId>
              <version>1.6.2</version>
            </dependency>
          </dependencies>
        </plugin>

        <plugin> <!-- Setup the parameters for use while loading fixtures. -->
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>dbunit-maven-plugin</artifactId>
          <version>1.0.3-subrosa.8</version>
          <configuration>
            <driver>${db.migration.driverClassName}</driver>
            <url>${db.migration.url}</url>
            <username>${db.migration.username}</username>
            <password>${db.migration.password}</password>
            <format>flat</format>
            <type>INSERT</type>
            <dataTypeFactoryName>org.dbunit.ext.postgresql.PostgresqlDataTypeFactory</dataTypeFactoryName>
            <supportBatchStatement>true</supportBatchStatement>
            <!-- Note that the actual fixture being imported is specified using -Dsrc= -->
          </configuration>
          <dependencies>
            <dependency>
              <groupId>postgresql</groupId>
              <artifactId>postgresql</artifactId>
              <version>${postgresql.version}</version>
            </dependency>
          </dependencies>
        </plugin>

        <plugin> <!-- Setup the common properties used when executing native SQL. -->
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>sql-maven-plugin</artifactId>
          <version>1.5</version>
          <configuration>
            <driver>${db.migration.driverClassName}</driver>
            <url>${db.migration.url}</url>
            <username>${db.migration.username}</username>
            <password>${db.migration.password}</password>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>postgresql</groupId>
              <artifactId>postgresql</artifactId>
              <version>${postgresql.version}</version>
            </dependency>
          </dependencies>
        </plugin>

        <!-- Fetch the deploy.sh script for convenience -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <executions>
            <execution>
              <id>fetch-deploy-script</id>
              <phase>never-run</phase>
              <goals><goal>unpack-dependencies</goal></goals>
              <configuration>
                <includeArtifactIds>deployer-tools</includeArtifactIds>
                <includes>scripts/deploy.sh</includes>
                <outputDirectory>${project.build.directory}</outputDirectory>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>com.subrosa.maven.plugins</groupId>
          <artifactId>deployer-pom-maven-plugin</artifactId>
          <version>0.1</version>
        </plugin>

        <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>properties-maven-plugin</artifactId>
                    <versionRange>[1.0-alpha-2,)</versionRange>
                    <goals>
                      <goal>read-project-properties</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <versionRange>[1.1,)</versionRange>
                    <goals>
                      <goal>enforce</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>net.alchim31.maven</groupId>
                    <artifactId>yuicompressor-maven-plugin</artifactId>
                    <versionRange>[1.2,)</versionRange>
                    <goals>
                      <goal>compress</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>banned-dependencies</id>
            <goals><goal>enforce</goal></goals>
            <configuration>
              <rules>
                <bannedDependencies>
                  <excludes>
                    <exclude>commons-logging</exclude>
                    <exclude>log4j</exclude>
                    <exclude>org.slf4j:slf4j-log4j12</exclude>
                    <exclude>commons-dbcp</exclude>
                  </excludes>
                </bannedDependencies>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>

    <extensions>
      <extension>
        <groupId>com.subrosa.tools</groupId>
        <artifactId>deployer-tools</artifactId>
        <version>${deployer-tools.version}</version>
      </extension>
    </extensions>
  </build>

  <profiles>
    <profile>
      <id>captive-config</id>
      <properties>
        <external.config.directory>${project.build.directory}/ext-config</external.config.directory>
        <external.config.checkoutDirectory>${project.build.directory}/checkout-config</external.config.checkoutDirectory>
        <skipConfigCheckoutIfExists>true</skipConfigCheckoutIfExists>
      </properties>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-scm-plugin</artifactId>
              <executions>
                <execution>
                  <id>fetch-external-configs</id>
                  <phase>never-run</phase>
                  <goals><goal>checkout</goal></goals>
                  <configuration>
                    <checkoutDirectory>${external.config.checkoutDirectory}</checkoutDirectory>
                    <connectionUrl>${external.config.repositoryUrl}</connectionUrl>
                    <includes>${external.config.environment}/**</includes>
                    <skipCheckoutIfExists>${skipConfigCheckoutIfExists}</skipCheckoutIfExists>
                    <scmVersion>${external.config.repositoryRevision}</scmVersion>
                  </configuration>
                </execution>
              </executions>
            </plugin>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-assembly-plugin</artifactId>
              <executions>
                <execution>
                  <id>assemble-external-configs</id>
                  <phase>never-run</phase>
                  <goals><goal>single</goal></goals>
                  <configuration>
                    <attach>false</attach>
                    <finalName>ext-config</finalName>
                    <appendAssemblyId>false</appendAssemblyId>
                    <descriptorRefs>
                      <descriptorRef>captive-config</descriptorRef>
                    </descriptorRefs>
                  </configuration>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </pluginManagement>

        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <id>enforce-environment</id>
                <goals><goal>enforce</goal></goals>
                <configuration>
                  <rules>
                    <requireProperty>
                      <property>external.config.environment</property>
                      <message>The captive-config profile requires the external.config.environment property be set.</message>
                    </requireProperty>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>refresh-config</id>
      <properties>
        <skipConfigCheckoutIfExists>false</skipConfigCheckoutIfExists>
      </properties>
    </profile>

    <profile>
      <id>prepare-deployment</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <id>enforce-deployer</id>
                <goals><goal>enforce</goal></goals>
                <configuration>
                  <rules>
                    <requireFilesExist>
                      <files>
                        <file>src/main/conf/deployer.conf</file>
                      </files>
                      <message>Base deployer.conf not found, most likely because this is not an unpacked deployer artifact.</message>
                    </requireFilesExist>
                    <requireProperty>
                      <property>external.config.environment</property>
                      <message>Deployers require the external.config.environment property be set.</message>
                    </requireProperty>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>fetch-war</id>
                <phase>generate-sources</phase>
                <goals><goal>copy</goal></goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>${project.groupId}</groupId>
                      <artifactId>${project.artifactId}</artifactId>
                      <version>${project.version}</version>
                      <type>${project.packaging}</type>
                      <outputDirectory>${project.build.directory}</outputDirectory>
                      <destFileName>${external.config.appName}-${project.version}.${project.packaging}</destFileName>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>filter-deployer-conf</id>
                <phase>generate-sources</phase>
                <goals><goal>copy-resources</goal></goals>
                <configuration>
                  <outputDirectory>${project.build.directory}</outputDirectory>
                  <resources>
                    <resource>
                      <directory>src/main/conf</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                  <useDefaultDelimiters>false</useDefaultDelimiters>
                  <delimiters>
                    <delimiter>@</delimiter>
                  </delimiters>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <!-- used by the deployer to do token replacement on a WAR context file before deploying -->
      <id>filter-context-file</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>filter-context-file</id>
                <phase>generate-resources</phase>
                <goals><goal>copy-resources</goal></goals>
                <configuration>
                  <outputDirectory>${project.build.directory}</outputDirectory>
                  <resources>
                    <resource>
                      <directory>src/main/context</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- A profile that is only safe to run on sandbox/developer machines
         because it resets the database and rebuilds it from the ground up. -->
    <profile>
      <id>enable-db-tests</id>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>com.carbonfive.db-support</groupId>
              <artifactId>db-migration-maven-plugin</artifactId>
              <configuration>
                <maxPhaseToApply>post-downtime</maxPhaseToApply>
              </configuration>
              <executions>
                <execution>
                  <id>reset-and-migrate-all</id>
                  <goals><goal>reset</goal></goals>
                  <phase>never-run</phase>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </pluginManagement>

        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <id>enforce-non-deployer</id>
                <phase>process-test-resources</phase>
                <goals><goal>enforce</goal></goals>
                <configuration>
                  <rules>
                    <requireFilesDontExist>
                      <files>
                        <file>src/main/conf/deployer.conf</file>
                      </files>
                      <message>Can't use enable-db-tests profile within a deployer artifact.</message>
                    </requireFilesDontExist>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>skip-db-tests</id>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-surefire-plugin</artifactId>
              <configuration>
                <excludes>
                  <exclude>**/*$*</exclude>  <!-- Default exclude to skip inner classes -->
                  <exclude>**/*DBTest.java</exclude>
                </excludes>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <profile>
      <id>db-migration-new</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <id>enforce-for-new-migration</id>
                <goals><goal>enforce</goal></goals>
                <configuration>
                  <rules>
                    <requireFilesDontExist>
                      <files>
                        <file>src/main/conf/deployer.conf</file>
                      </files>
                      <message>Can't create new migrations within a deployer artifact.</message>
                    </requireFilesDontExist>
                    <requireProperty>
                      <property>db.migration.phase</property>
                      <message>Must specify a phase by activating one of the following profiles: pre-downtime, downtime, post-downtime</message>
                      <regex>^(|pre-|post-)downtime$</regex>
                      <regexMessage>Migration phase must be one of: pre-downtime, downtime, post-downtime (use the profiles!)</regexMessage>
                    </requireProperty>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>com.carbonfive.db-support</groupId>
            <artifactId>db-migration-maven-plugin</artifactId>
            <configuration>
              <phase>${db.migration.phase}</phase>
            </configuration>
            <executions>
              <execution>
                <id>new</id>
                <phase>generate-resources</phase>
                <goals><goal>new</goal></goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>mongo-migration-new</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <id>enforce-for-new-migration</id>
                <goals><goal>enforce</goal></goals>
                <configuration>
                  <rules>
                    <requireFilesDontExist>
                      <files>
                        <file>src/main/conf/deployer.conf</file>
                      </files>
                      <message>Can't create new migrations within a deployer artifact.</message>
                    </requireFilesDontExist>
                    <requireProperty>
                      <property>db.migration.phase</property>
                      <message>Must specify a phase by activating one of the following profiles: pre-downtime, downtime, post-downtime</message>
                      <regex>^(|pre-|post-)downtime$</regex>
                      <regexMessage>Migration phase must be one of: pre-downtime, downtime, post-downtime (use the profiles!)</regexMessage>
                    </requireProperty>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>com.subrosa.maven.plugins</groupId>
            <artifactId>mongo-maven-plugin</artifactId>
            <configuration>
              <phase>${db.migration.phase}</phase>
            </configuration>
            <executions>
              <execution>
                <id>new</id>
                <phase>generate-resources</phase>
                <goals><goal>new</goal></goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

      <profile>
        <id>db-migration-check</id>
        <build>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-enforcer-plugin</artifactId>
              <executions>
                <execution>
                  <id>enforce-phase</id>
                  <goals><goal>enforce</goal></goals>
                  <configuration>
                    <rules>
                      <requireProperty>
                        <property>db.migration.phase</property>
                        <message>Must specify a phase by activating one of the following profiles: pre-downtime, downtime, post-downtime</message>
                        <regex>^(|pre-|post-)downtime$</regex>
                        <regexMessage>Migration phase must be one of: pre-downtime, downtime, post-downtime (use the profiles!)</regexMessage>
                      </requireProperty>
                    </rules>
                  </configuration>
                </execution>
              </executions>
            </plugin>
            <plugin>
              <groupId>com.carbonfive.db-support</groupId>
              <artifactId>db-migration-maven-plugin</artifactId>
              <configuration>
                <maxPhaseToApply>${db.migration.phase}</maxPhaseToApply>
              </configuration>
              <executions>
                <execution>
                  <id>check</id>
                  <phase>process-resources</phase>
                  <goals><goal>check</goal></goals>
                </execution>
              </executions>
            </plugin>

            <plugin>
              <groupId>com.subrosa.maven.plugins</groupId>
              <artifactId>mongo-maven-plugin</artifactId>
              <configuration>
                <maxPhaseToApply>${db.migration.phase}</maxPhaseToApply>
              </configuration>
              <executions>
                <execution>
                  <id>check</id>
                  <phase>process-resources</phase>
                  <goals><goal>check</goal></goals>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </build>
      </profile>

      <profile>
        <id>db-migration-validate</id>
        <build>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-enforcer-plugin</artifactId>
              <executions>
                <execution>
                  <id>enforce-phase</id>
                  <goals><goal>enforce</goal></goals>
                  <configuration>
                    <rules>
                      <requireProperty>
                        <property>db.migration.phase</property>
                        <message>Must specify a phase by activating one of the following profiles: pre-downtime, downtime, post-downtime</message>
                        <regex>^(|pre-|post-)downtime$</regex>
                        <regexMessage>Migration phase must be one of: pre-downtime, downtime, post-downtime (use the profiles!)</regexMessage>
                      </requireProperty>
                    </rules>
                  </configuration>
                </execution>
              </executions>
            </plugin>
            <plugin>
              <groupId>com.carbonfive.db-support</groupId>
              <artifactId>db-migration-maven-plugin</artifactId>
              <configuration>
                <maxPhaseToApply>${db.migration.phase}</maxPhaseToApply>
              </configuration>
              <executions>
                <execution>
                  <id>validate</id>
                  <phase>process-resources</phase>
                  <goals><goal>validate</goal></goals>
                </execution>
              </executions>
            </plugin>

            <plugin>
              <groupId>com.subrosa.maven.plugins</groupId>
              <artifactId>mongo-maven-plugin</artifactId>
              <configuration>
                <maxPhaseToApply>${db.migration.phase}</maxPhaseToApply>
              </configuration>
              <executions>
                <execution>
                  <id>validate</id>
                  <phase>process-resources</phase>
                  <goals><goal>validate</goal></goals>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </build>
      </profile>

    <profile>
      <id>db-migration-migrate</id>
      <properties>
        <db.migration.singleTransaction>false</db.migration.singleTransaction>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <id>enforce-phase</id>
                <goals><goal>enforce</goal></goals>
                <configuration>
                  <rules>
                    <requireProperty>
                      <property>db.migration.phase</property>
                      <message>Must specify a phase by activating one of the following profiles: pre-downtime, downtime, post-downtime</message>
                      <regex>^(|pre-|post-)downtime$</regex>
                      <regexMessage>Migration phase must be one of: pre-downtime, downtime, post-downtime (use the profiles!)</regexMessage>
                    </requireProperty>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.carbonfive.db-support</groupId>
            <artifactId>db-migration-maven-plugin</artifactId>
            <configuration>
              <maxPhaseToApply>${db.migration.phase}</maxPhaseToApply>
              <singleTransaction>${db.migration.singleTransaction}</singleTransaction>
            </configuration>
            <executions>
              <execution>
                <id>migrate</id>
                <phase>process-resources</phase>
                <goals><goal>migrate</goal></goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>com.subrosa.maven.plugins</groupId>
            <artifactId>mongo-maven-plugin</artifactId>
            <configuration>
              <maxPhaseToApply>${db.migration.phase}</maxPhaseToApply>
            </configuration>
            <executions>
              <execution>
                <id>migrate</id>
                <phase>process-resources</phase>
                <goals><goal>migrate</goal></goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>db-migration-reset</id>
      <properties>
        <skipCurrentRelease>false</skipCurrentRelease>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>com.carbonfive.db-support</groupId>
            <artifactId>db-migration-maven-plugin</artifactId>
            <configuration>
              <maxPhaseToApply>post-downtime</maxPhaseToApply>
              <skipCurrentRelease>${skipCurrentRelease}</skipCurrentRelease>
            </configuration>
            <executions>
              <execution>
                <id>migrate</id>
                <phase>process-resources</phase>
                <goals><goal>reset</goal></goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>com.subrosa.maven.plugins</groupId>
            <artifactId>mongo-maven-plugin</artifactId>
            <configuration>
              <maxPhaseToApply>post-downtime</maxPhaseToApply>
              <skipCurrentRelease>${skipCurrentRelease}</skipCurrentRelease>
            </configuration>
            <executions>
              <execution>
                <id>migrate</id>
                <phase>process-resources</phase>
                <goals><goal>reset</goal></goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- drops database and recreates it empty, does not run migrations -->
    <profile>
      <id>db-migration-recreate</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.carbonfive.db-support</groupId>
            <artifactId>db-migration-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>recreate</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>drop</goal>
                  <goal>create</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>com.subrosa.maven.plugins</groupId>
            <artifactId>mongo-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>recreate</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>drop</goal>
                  <goal>create</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile> <!-- Pre-downtime migrations for the current release -->
      <id>pre-downtime</id>
      <properties>
        <db.migration.phase>pre-downtime</db.migration.phase>
      </properties>
    </profile>
    <profile> <!-- Downtime migrations for the current release -->
      <id>downtime</id>
      <properties>
        <db.migration.phase>downtime</db.migration.phase>
        <db.migration.singleTransaction>true</db.migration.singleTransaction>
      </properties>
    </profile>
    <profile> <!-- Post-downtime migrations for the current release -->
      <id>post-downtime</id>
      <properties>
        <db.migration.phase>post-downtime</db.migration.phase>
      </properties>
    </profile>

    <!-- Profile that activates automatically for deployers only -->
    <profile>
      <id>for-deployers-only</id>
      <activation>
        <file>
          <exists>src/main/conf/deployer.conf</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <!-- Skip enforcement of site descriptor from default-pom -->
                <id>enforce-site-descriptor</id>
                <goals><goal>enforce</goal></goals>
                <configuration>
                  <skip>true</skip>
                </configuration>
              </execution>
              <execution>
                <!-- Ensure the deployer doesn't get beyond the test phase -->
                <id>protect-from-deployer-corruption</id>
                <phase>prepare-package</phase>
                <goals><goal>enforce</goal></goals>
                <configuration>
                  <rules>
                    <alwaysFail>
                      <message>To avoid corrupting artifacts, you can't run a deployer artifact past the test phase.</message>
                    </alwaysFail>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <distributionManagement>
    <site>
      <id>subrosa-site</id>
      <name>Subrosa Maven Docs</name>
      <url>${siteDeployRoot}/webapp-pom</url>
    </site>
  </distributionManagement>
</project>
